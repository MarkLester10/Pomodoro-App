[{"F:\\JavaScript Practice\\pomodoro\\src\\index.js":"1","F:\\JavaScript Practice\\pomodoro\\src\\App.js":"2","F:\\JavaScript Practice\\pomodoro\\src\\components\\Timer.js":"3","F:\\JavaScript Practice\\pomodoro\\src\\components\\Customizer.js":"4"},{"size":219,"mtime":1609826715545,"results":"5","hashOfConfig":"6"},{"size":458,"mtime":1609844355263,"results":"7","hashOfConfig":"6"},{"size":4529,"mtime":1609851691416,"results":"8","hashOfConfig":"6"},{"size":3914,"mtime":1609844646520,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"r9q6xw",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\JavaScript Practice\\pomodoro\\src\\index.js",[],["20","21"],"F:\\JavaScript Practice\\pomodoro\\src\\App.js",[],"F:\\JavaScript Practice\\pomodoro\\src\\components\\Timer.js",["22"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport Duration from \"luxon/src/duration.js\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport LaptopChromebookOutlinedIcon from \"@material-ui/icons/LaptopChromebook\";\r\nimport FreeBreakfastOutlinedIcon from \"@material-ui/icons/FreeBreakfast\";\r\nimport LocalHotelOutlinedIcon from \"@material-ui/icons/LocalHotel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport { longBreakContext, breakContext, workContext } from \"./Customizer\";\r\n\r\nimport endedAudio from \"../Audio/alert_simple.wav\";\r\nimport startedAudio from \"../Audio/notification_simple-01.wav\";\r\nconst Timer = () => {\r\n  // State\r\n  const [timerLength, setTimerLength] = useState(24);\r\n  const [seconds, setSeconds] = useState(59);\r\n  const [timerOn, setTimerOn] = useState(false);\r\n  const [timerDone, setTimerDone] = useState(true);\r\n  const [sessionType, setSessionType] = useState(\"Work\");\r\n  const [sessionNumber, setSessionNumber] = useState(0);\r\n\r\n  //Timer\r\n  const startedSound = new Audio(startedAudio);\r\n  const endedSound = new Audio(endedAudio);\r\n\r\n  //Data from context api\r\n  const longBreakLength = useContext(longBreakContext);\r\n  const breakLength = useContext(breakContext);\r\n  const workLength = useContext(workContext);\r\n\r\n  //Play and Pause Timer\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (timerOn) {\r\n        setSeconds((seconds) => seconds - 1);\r\n        if (seconds === 0) {\r\n          setSeconds((seconds) => seconds + 59);\r\n          setTimerLength((timerLength) => timerLength - 1);\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    if (timerOn) {\r\n      setTimerDone(false);\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [timerOn, seconds]);\r\n\r\n  //Timer Done Event Handler\r\n  useEffect(() => {\r\n    if (timerLength === 0) {\r\n      setTimerOn(false);\r\n      setTimerDone(true);\r\n      setSessionType((prevType) => {\r\n        if (prevType === \"Work\") return \"Break\";\r\n        if (prevType === \"Break\") return \"Work\";\r\n        if (prevType === \"Long Break\") return \"Work\";\r\n      });\r\n    }\r\n  }, [timerLength]);\r\n\r\n  //Switching Timers: From Work Mode to Break Mode\r\n  useEffect(() => {\r\n    if (sessionType === \"Work\") {\r\n      setTimerLength(workLength);\r\n    }\r\n  }, [sessionType, workLength]);\r\n\r\n  useEffect(() => {\r\n    if (sessionType === \"Break\") {\r\n      setTimerLength(breakLength);\r\n    }\r\n  }, [breakLength, sessionType]);\r\n\r\n  useEffect(() => {\r\n    if (sessionType === \"Long Break\") {\r\n      setTimerLength(longBreakLength);\r\n    }\r\n  }, [longBreakLength, sessionType]);\r\n\r\n  //Switching Timers: From Break Mode to Long Break Mode\r\n  useEffect(() => {\r\n    if (sessionType === \"Work\" && timerDone) {\r\n      setSessionNumber((prevNumber) => prevNumber + 1);\r\n    }\r\n    if (timerDone) {\r\n      endedSound.play();\r\n    }\r\n  }, [sessionType, timerDone]);\r\n\r\n  //Long Break Handler\r\n\r\n  useEffect(() => {\r\n    if (sessionNumber > 4) {\r\n      setSessionType(\"Long Break\");\r\n      setSessionNumber(0);\r\n    }\r\n  }, [sessionNumber]);\r\n\r\n  return (\r\n    <div\r\n      className=\"flex items-center\r\n    flex-col\"\r\n    >\r\n      <p className=\"text-6xl text-center mt-8\">\r\n        {Duration.fromObject({\r\n          minutes: timerLength,\r\n          seconds: seconds,\r\n        }).toFormat(\"mm:ss\")}\r\n      </p>\r\n      <p className=\"uppercase border text-lg my-6 py-4 px-2\">\r\n        Session Number: {sessionNumber}\r\n      </p>\r\n      <div className=\"mb-6 animate-bounce\">\r\n        {sessionType === \"Break\" && (\r\n          <FreeBreakfastOutlinedIcon\r\n            style={{ color: \"white\", fontSize: \"50px\" }}\r\n          />\r\n        )}\r\n        {sessionType === \"Work\" && (\r\n          <LaptopChromebookOutlinedIcon\r\n            style={{ color: \"#69f0ae\", fontSize: \"50px\" }}\r\n          />\r\n        )}\r\n        {sessionType === \"Long Break\" && (\r\n          <LocalHotelOutlinedIcon\r\n            style={{ color: \"white\", fontSize: \"50px\" }}\r\n          />\r\n        )}\r\n        <span className=\"ml-2 text-gray-400 text-xl\">{sessionType} Mode</span>\r\n      </div>\r\n      <Button\r\n        className=\"text-white\"\r\n        color=\"default\"\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        startIcon={timerOn ? <PauseIcon /> : <PlayArrowIcon />}\r\n        onClick={() => {\r\n          setTimerOn(!timerOn);\r\n          startedSound.play();\r\n        }}\r\n      >\r\n        {timerOn ? \"Pause\" : \"Run\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","F:\\JavaScript Practice\\pomodoro\\src\\components\\Customizer.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":91,"column":6,"nodeType":"29","endLine":91,"endColumn":30,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'endedSound'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [endedSound, sessionType, timerDone]",{"range":"36","text":"37"},[2913,2937],"[endedSound, sessionType, timerDone]"]